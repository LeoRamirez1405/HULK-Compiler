
for(let a = 0; a < 3; a := a + 1){
    if(a is number and True){
        print("value:"@@a);
    }
    else{
        print("Este es el else del for");
    }
}

print(
    let a = 3 
        in 
            while(a > 0){  
                a := a - 1; 
                print(a);
                if(a == 0){
                    "Ya termino";
                    }
                });
while(False){
    print("No debe entrar a aqui");
}
print(1.4 + 2);

let m = 7;

function test(x: number){
    x + 7;
}
function fib(n:number):number => if (n == 0 or n == 1){ 1;} else{ fib(n-1) + fib(n-2);};
function fact(x:number) => let f = 1, range = new Range(1,x+1) in while(range.next()) {f := f * range.current();};
function gcd(a:number, b:number) => while (a > 0){
        let m = a % b in {
            b := a;
            a := m;
        };}


type Range(min:number, max:number) {
    self.min = min;
    self.max = max;
    self.current = min - 1;

    next(): bool => (self.current := self.current + 1) < self.max;
    current(): number => self.current;
    test_self(x: number): number => self.min + x;
}
type Point(x:number,y:number) {
    self.x = x;
    self.y = y;

    getX():number => self.x;
    getY():number => self.y;

let ran = new Range(5, 9);
print(ran);
print(ran.test_self(8));

    name() => self.firstname @@ self.lastname;
}

type Superman inherits Bird{

}
type Bird inherits Superman{

}
type Plane{

}
{
    42;
    print(42);
    print((((1 + 2) ^ 3) * 4) / 5);
    print("Hello World");
    print("The message is \"Hello World\"");
    print("The meaning of life is " @ 42);
    print(sin(2 * PI) ^ 2 + cos(3 * PI / log(4, 64)));
    
    {
        let a = 2;
        print(42);
        print(sin(PI/2));
        print("Hello World");
    }
    {
        let a = 3;
    }

    print(tan2(PI) ** 2 + cot(PI) ** 2);

    let msg = "Hello World" in print(msg);
    let number = 42, text = "The meaning of life is" in
        print(text @ number);
    let number = 42 in
        let text = "The meaning of life is" in
            print(text @ number);
    let number = 42 in (
        let text = "The meaning of life is" in (
                print(text @ number)
            )
        );
    let a = 6, b = a * 7 in print(b);
    let a = 6 in
        let b = a * 7 in
            print(b);
    let a = 5, b = 10, c = 20 in {
        print(a+b);
        print(b*c);
        print(c/a);
    };
    let a = (let b = 6 in b * 7) in print(a);
    print((let b = 6 in b * 7));
    let a = 20 in {
        
        a := 42;
        print(a);
    };
    let a = 7 in (a := 7 * 6);
    let a = 0 in {
        print(a);
        a := 1;
        print(a);
    };
    let a = 0 in
        let b = (a := 1) in {
            print(a);
            print(b);
        };
    let a = 42 in if (a % 2 == 0) {print("Even");} else { print("odd"); };
    let a = 42 in print(if (a % 2 == 0) {"even";} else {"odd";});
    let a = 42 in
        if (a % 2 == 0) {
            print(a);
            print("Even");
        }
        else {print("Odd");};
    let a = 42, mod = a % 3 in
        print(
            if (mod == 0) {"Magic";}
            elif (mod % 3 == 1) {"Woke";}
            else {"Dumb";}
        );
    let a = 10 in while (a >= 0) {
        print(a);
        a := a - 1;
    };
    
   let range = new Range(0,10) in while(range.next()) {print(range.current());};
    
    let iterable = new Range(0, 10) in
        while (iterable.next())
        {
            let x = iterable.current() in
                print(x);
        };

    let p = new Knight("Phil", "Collins") in
        print(p.name());
    let x = 42 in print(x);

print(m is Range);
print(ran is Range);

type Person(firstname:string, lastname:string) {
    self.firstname = firstname;
    self.lastname = lastname;

    name(): string => self.firstname @@ self.lastname;
    hash() : number {
        5;
    }
}

type Knight(value:string, value1:string) inherits Person(value , value1) {
    name():string => "Sir" @@ base();
    base():number=>1;
}

let per = new Person("Naomi", "Lahera");
print(per.name());

function createPerson(name: string, last_name: string){
    new Person(name, last_name);
}

print(createPerson("Leo", "Brian").name());
