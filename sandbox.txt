60 	 member_access -> .factor.identifier(arguments), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprNum -> .ExprNum+term, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .string, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 print_statement -> .print(expression), {'/', '%', '*', '**', '-', '^', '+', '.', ')'}
	 ExprNeg -> .ExprIsType, {'/', '%', '*', '**', '-', '^', '+', 'and', '.', 'or', '@', ')'}
	 math_call -> .log(ExprNum,ExprNum), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprOr -> .ExprOrorExprAnd, {'/', '%', '*', '**', '-', '^', '+', '.', 'or', '@', ')'}
	 math_call -> .tan(ExprNum), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .False, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 math_call -> .PI, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 math_call -> .sqrt(ExprNum), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprComp -> .ExprNum>ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 ExprComp -> .ExprNum>=ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 factorPow -> .factor^factorPow, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .identifier, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factorPow -> .factor**factorPow, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 term -> .term*factorPow, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .math_call, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 math_call -> .exp(ExprNum), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 expression -> .ExprOr, {'/', '%', '*', '**', '-', '^', '+', '.', '@', ')'}
	 ExprNum -> .ExprNum-term, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .member_access, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .number, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 expression -> .expression@@ExprOr, {'/', '%', '*', '**', '-', '^', '+', '.', '@', ')'}
	 math_call -> .rand(), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factorPow -> .factor, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .assignmentin{statement_list}, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprNeg -> .notExprIsType, {'/', '%', '*', '**', '-', '^', '+', 'and', '.', 'or', '@', ')'}
	 expression -> .expression@ExprOr, {'/', '%', '*', '**', '-', '^', '+', '.', '@', ')'}
	 factor -> .(expr_statement), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprComp -> .ExprNum<ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 ExprNum -> .term, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 term -> .term%factorPow, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprOr -> .ExprAnd, {'/', '%', '*', '**', '-', '^', '+', '.', 'or', '@', ')'}
	 ExprComp -> .ExprNum<=ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 factor -> .assignmentinexpr_statement, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprAnd -> .ExprAndandExprNeg, {'/', '%', '*', '**', '-', '^', '+', 'and', '.', 'or', '@', ')'}
	 term -> .factorPow, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 factor -> .True, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 term -> .term/factorPow, {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 expr_statement -> .print_statement, {'/', '%', '*', '**', '-', '^', '+', '.', ')'}
	 assignment -> .letmulti_assignment, {'in'}
	 factor -> assignmentin.{statement_list}, {'/', '%', '*', '**', '^', '-', '+', '.', ')'}
	 ExprComp -> .ExprNum==ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 ExprComp -> .ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 ExprAnd -> .ExprNeg, {'/', '%', '*', '**', '-', '^', '+', 'and', '.', 'or', '@', ')'}
	 expr_statement -> .expression, {'/', '%', '*', '**', '-', '^', '+', '.', ')'}
	 ExprComp -> .ExprNum!=ExprNum, {'/', '%', '*', '**', '-', '^', '+', 'and', 'is', '.', 'or', '@', ')'}
	 ExprIsType -> .ExprComp, {'/', '%', '*', '**', '-', '^', '+', 'and', '.', 'or', '@', ')'}
	 factor -> assignmentin.expr_statement, {'/', '%', '*', '**', '^', '-', '+', '.', ')'}
	 factor -> .identifier(arguments), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 math_call -> .cos(ExprNum), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'}
	 ExprIsType -> .ExprCompisidentifier, {'/', '%', '*', '**', '-', '^', '+', 'and', '.', 'or', '@', ')'}
	 math_call -> .sin(ExprNum), {'/', '.', '%', '**', '^', ')', '*', '-', '+', 'and', 'or', '<', '@', '>', '==', '<=', '>=', '!=', 'is'} 
